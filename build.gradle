plugins {
	id 'org.springframework.boot' version '2.6.2'

	id 'io.spring.dependency-management' version '1.0.11.RELEASE'

	id 'java'

	// RestDocs 관련
	id 'org.asciidoctor.jvm.convert' version '3.1.0'

	// jacoco
	id 'jacoco'

	// sonarqube

	//querydsl 추가
//	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'malangcute.bellytime'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

// sub-module(batch)
subprojects {
	group 'malangcute.bellytime'
	version '1.0'

	apply plugin: 'java'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'org.springframework.boot'

	sourceCompatibility = 11

	repositories {
		mavenCentral()
	}

	dependencies {
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'
		testImplementation('org.springframework.boot:spring-boot-starter-test')
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	}
}


repositories {
	mavenCentral()
}

dependencies {
	// 스프링 배치 설정
	implementation 'org.springframework.boot:spring-boot-starter-batch'

	// 엘라스틱 서치 설정
	implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'

	// db설정
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// h2 db설정
	runtimeOnly 'com.h2database:h2'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'

	// mysql,jpa 설정
	runtimeOnly 'mysql:mysql-connector-java'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	//querydsl 추가
//	implementation 'com.querydsl:querydsl-jpa'

	// 서큐리티 설정
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// jwt
	implementation 'io.jsonwebtoken:jjwt:0.9.1'

	// 타임리프 설정
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'


	// 밸리데이션 설정
	implementation 'org.springframework.boot:spring-boot-starter-validation'


	// 롬복 설정
	annotationProcessor 'org.projectlombok:lombok'
	compileOnly 'org.projectlombok:lombok'


//	// swagger 설정
//	implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
//	implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'

	// flyway 설정
	implementation 'org.flywaydb:flyway-core'

	//annotationprocessr 설정
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

	//s3 설정
//	implementation platform('software.amazon.awssdk:bom:2.15.0')
//	implementation 'software.amazon.awssdk:s3:2.17.112'

	//cloudfront, s3 설정
	implementation "org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE"


	//rabbitMQ 설정(외부 브로커 핸들링용)
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-reactor-netty', version: '2.4.6'

	//jackson2json에서 LocalDateTime을 handling 하기 위해
	implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.12.4'

	implementation 'org.springframework.boot:spring-boot-starter-amqp'

	// 통신 설정
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.kafka:spring-kafka'

	implementation group: 'org.webjars', name: 'sockjs-client', version: '1.1.2'
	implementation group: 'org.webjars', name: 'stomp-websocket', version: '2.3.3-1'

	//netty macos dns 설정
	implementation 'io.netty:netty-resolver-dns-native-macos:4.1.72.Final:osx-aarch_64'

	//quartz 스케쥴러 추가
	implementation 'org.springframework.boot:spring-boot-starter-quartz'

	//json Object
	implementation 'org.json:json:20190722'


	//MBR 의존성 추가(위치 계산 hibernate와 버전 동일)
	implementation group: 'org.hibernate', name: 'hibernate-spatial', version: '5.6.3.Final'



	/**
	 * testImplementation
	 */

	// rabbitmq test
	testImplementation 'org.springframework.amqp:spring-rabbit-test'

	// RestDocs 관련
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	//batch test
	testImplementation 'org.springframework.batch:spring-batch-test'

	//kafka test
	testImplementation 'org.springframework.kafka:spring-kafka-test'

	//security test
	testImplementation 'org.springframework.security:spring-security-test'

	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'


	//test container 설정
//	testImplementation "org.testcontainers:mysql:1.16.3"

	testImplementation 'org.testcontainers:testcontainers:1.16.3'
	testImplementation 'org.testcontainers:junit-jupiter:1.16.3'
	testImplementation 'org.testcontainers:mysql:1.16.3'

}


test {
	useJUnitPlatform()
	jacoco {
		destinationFile = file("$buildDir/jacoco/jacoco.exec")
	}
	finalizedBy 'jacocoTestReport'
}

//snippets 설정
ext {
	snippetsDir = file('build/generated-snippets')
}

// rest docs 생성
asciidoctor {
	sourceDir file('src/docs/asciidoc')
	outputDir file('build/html5')
	attributes 'snippets': snippetsDir
	mustRunAfter test
	dependsOn test
}

// rest docs html
bootJar {
	from('build/html5') {
		into 'BOOT-INF/classes/static/docs'
	}
}

// jacoco
jacoco {
	toolVersion = '0.8.7'
}


// jacocotest 리포트 설정
jacocoTestReport {
	reports {
		html.enabled true
		xml.enabled true
		csv.enabled false

		//  각 리포트 타입 마다 리포트 저장 경로를 설정할 수 있다.
		html.destination file("$buildDir/jacocoHtml")
		xml.destination file("$buildDir/jacoco.xml")
	}

	finalizedBy 'jacocoTestCoverageVerification'
}

// jacoco test coverage 설정 -> 60퍼센트 설정 기본
jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true
			element = 'CLASS'
			// includes = []

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.60
			}

			excludes = []
		}
	}
}

jar {
	enabled = false
}